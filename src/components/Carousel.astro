---
// Define the props for this component
interface Props {
  slides: ImageMetadata[];
  autoplay?: boolean;
  interval?: number;
  showIndicators?: boolean;
  initialSlide?: number;
}

// Destructure the component props with defaults
const {
  slides,
  autoplay = false,
  interval = 5000,
  showIndicators = true,
  initialSlide = 0,
} = Astro.props;
---

<div class="carousel-container">
  <button
    id="prev-button"
    aria-label="previous"
    class="top-0 left-0 absolute h-full w-1/5 opacity-0 hover:opacity-50 hover:bg-gray-700"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      class="size-20 fill-white ml-auto mr-auto"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="m18.75 4.5-7.5 7.5 7.5 7.5m-6-15L5.25 12l7.5 7.5"></path>
    </svg>
  </button>
  <button
    id="next-button"
    aria-label="next"
    class="top-0 right-0 absolute h-full w-1/5 opacity-0 hover:opacity-50 hover:bg-gray-700"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      class="size-20 fill-white ml-auto mr-auto"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="m5.25 4.5 7.5 7.5-7.5 7.5m6-15 7.5 7.5-7.5 7.5"></path>
    </svg>
  </button>
  <div class="carousel rounded-3xl">
    {
      slides.map((slide, index) => (
        <div id={`slide${index}`} class="carousel-item">
          <img
            src={slide.src}
            alt={`Slide ${index + 1}`}
            class="display-image"
          />
        </div>
      ))
    }
  </div>

  {/* Carousel indicators */}
  {
    showIndicators && (
      <div class="flex justify-center w-full py-2 gap-2 carousel-indicators">
        {slides.map((_, index) => (
          <button
            class={`btn btn-xs btn-circle ${index === initialSlide ? "btn-primary" : "btn-ghost"}`}
            data-slide-index={index}
          />
        ))}
      </div>
    )
  }
</div>

<script>
  // Store the total number of slides
  const slides = document.querySelectorAll(".carousel-item");
  const totalSlides = slides.length;

  // Current slide index - start with initialSlide or default to 0
  let currentSlide = 0;

  // Function to go to a specific slide
  function goToSlide(index: number) {
    // Make sure index is within bounds
    const slideIndex = (index + totalSlides) % totalSlides;
    currentSlide = slideIndex;

    // Scroll to the slide
    const slideElement = document.getElementById(`slide${slideIndex}`);
    if (slideElement) {
      slideElement.scrollIntoView({ behavior: "smooth" });
    }

    // Update indicators if they exist
    const indicators = document.querySelectorAll(".carousel-indicators button");
    indicators.forEach((indicator, i) => {
      if (i === slideIndex) {
        indicator.classList.remove("btn-ghost");
        indicator.classList.add("btn-primary");
      } else {
        indicator.classList.remove("btn-primary");
        indicator.classList.add("btn-ghost");
      }
    });
  }

  // Next slide function
  function nextSlide() {
    goToSlide(currentSlide + 1);
  }

  // Previous slide function
  function prevSlide() {
    goToSlide(currentSlide - 1);
  }

  // Wait for DOM to be fully loaded
  document.addEventListener("DOMContentLoaded", () => {
    // Get navigation buttons
    const prevButton = document.getElementById("prev-button");
    const nextButton = document.getElementById("next-button");

    // Add click event listeners
    if (prevButton) {
      prevButton.addEventListener("click", prevSlide);
    }

    if (nextButton) {
      nextButton.addEventListener("click", nextSlide);
    }

    // Add event listeners to indicators
    const indicators = document.querySelectorAll(".carousel-indicators button");
    indicators.forEach((indicator, index) => {
      indicator.addEventListener("click", () => {
        goToSlide(index);
      });
    });

    // Set up autoplay if enabled
    const carousel = document.querySelector(".carousel-container");
    const autoplay = carousel?.getAttribute("data-autoplay") === "true";
    const interval = parseInt(
      carousel?.getAttribute("data-interval") || "5000",
      10
    );

    let autoplayInterval: string | number | NodeJS.Timeout | null | undefined =
      null;

    function startAutoplay() {
      if (autoplay) {
        autoplayInterval = setInterval(nextSlide, interval);
      }
    }

    function stopAutoplay() {
      if (autoplayInterval) {
        clearInterval(autoplayInterval);
        autoplayInterval = null;
      }
    }

    // Start with the initial slide
    const initialSlideAttr = carousel?.getAttribute("data-initial-slide");
    const initialSlide = initialSlideAttr ? parseInt(initialSlideAttr, 10) : 0;
    goToSlide(initialSlide);

    // Start autoplay
    startAutoplay();

    // Pause on hover
    carousel?.addEventListener("mouseenter", stopAutoplay);
    carousel?.addEventListener("mouseleave", startAutoplay);
  });
</script>

<style>
  .carousel-container {
    position: relative;
    overflow: hidden;
  }

  .display-image {
    max-width: 100%;
    max-height: calc(100vh - 100px);
    aspect-ratio: auto;
    object-fit: contain;
    transition: opacity 0.3s ease;
  }
</style>
